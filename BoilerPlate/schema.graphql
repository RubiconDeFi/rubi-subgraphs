type Rubicon @entity {
    " the address of the RubiconMarket contract "
    id: Bytes!
    " the total user count recorded by the subgraph "
    total_users: BigInt!
    " the total transaction count recorded by the subgraph "
    total_transactions: BigInt!
    " the total volume of the market in USD "
    total_volume_usd: BigDecimal!
}

type User @entity {
    " the user address "
    id: Bytes!
}

type Transaction @entity {
    " the transaction hash :check:"
    id: Bytes!
    " transaction hash as a hex string :check:"
    txn: String!
    " the block number :check:"
    block: BigInt!
    " the timestamp :check:"
    timestamp: BigInt!
    " map to a user entity :check:"
    user: User!
    " the price of eth at the time of the transaction :check:"
    eth_price: BigDecimal!
    " the data input of the transaction "
    data: Bytes!
    " the l2 gas price in eth :check:"
    l2_gas_price: BigDecimal!
    " the amount of gas used by the l2 transaction :check:"
    l2_gas_used: BigInt!
    " the l2 executino fee in eth "
    l2_execution_fee: BigDecimal!
    " the l2 execution fee in USD "
    l2_execution_fee_usd: BigDecimal!
    " the l1 base fee in eth :check:"
    l1_base_fee: BigDecimal!
    " the l1_gas_used :underestimate:"
    l1_gas_used: BigDecimal!
    " overhead in the l1 transaction "
    l1_overhead: BigInt!
    " the l1 scalar "
    l1_scalar: BigDecimal!
    " the l1 decimal to make dynamic scalar value "
    l1_decimal: BigInt!
    " the l1 fee in eth "
    l1_fee: BigDecimal!
    " the l1 fee in usd "
    l1_fee_usd: BigDecimal!
    " the total gas fee in eth "
    total_gas_fee: BigDecimal!
    " the total gas fee in usd "
    total_gas_fee_usd: BigDecimal!    
}

type Token @entity {
    " token address "
    id: Bytes!
    " token address "
    address: String!
    " token decimals "
    decimals: BigInt!
}

type Offer @entity {
    " the id of the offer on the RubiconMarket contract "
    id: ID!
    " the transaction entity that this offer was created from "
    transaction: Transaction!
    " the user entity that created this offer "
    maker: User!
    " the token that the offer will pay with "
    pay_gem: Token!
    " the token that the maker offers to buy "
    buy_gem: Token!
    " the amount of the pay token that the offer will pay - in the integer format "
    pay_amt: BigInt!
    " the amount of the buy token that the offer will buy - in the integer format "
    buy_amt: BigInt!
    " the amount of the pay token in human readable format "
    pay_amt_formatted: BigDecimal!
    " the amount of the buy token in human readable format "
    buy_amt_formatted: BigDecimal!
    " the USD value of the pay token at that block "
    pay_amt_usd: BigDecimal!
    " the USD value of the buy token at that block "
    buy_amt_usd: BigDecimal!
    " the amount of the pay token that the offer has paid out - in the integer format "
    paid_amt: BigInt!
    " the amount of the buy token that the offer has bought - in the integer format "
    bought_amt: BigInt!
    " the amount of the pay token that the offer has paid out in human readable format "
    paid_amt_formatted: BigDecimal!
    " the amount of the buy token that the offer has bought in human readable format "
    bought_amt_formatted: BigDecimal!
    " the sum of the USD value of the pay token that the offer has paid out at each fill instance "
    paid_amt_usd: BigDecimal!
    " the sum of the USD value of the buy token that the offer has bought at each fill instance "
    bought_amt_usd: BigDecimal!
    " boolean indicating if the offer was filled or not "
    filled: Boolean!
    " boolean indicating if the offer was cancelled or not "
    cancelled: Boolean!
    " boolean indicating if the offer is live or not "
    live: Boolean!
    " the timestamp that offer was removed at"
    removed_timestamp: BigInt
}

type Take @entity {
    " the transaction hash and log index of the take event "
    id: Bytes!
    " the transaction entity that this offer was created from "
    transaction: Transaction!
    " the user entity that took the offer "
    taker: User!
    " the token that the offer will pay with "
    pay_gem: Token!
    " the token that the offer offer to buy "
    buy_gem: Token!
    " the amount of the pay token that the offer will pay - in the integer format "
    pay_amt: BigInt!
    " the amount of the buy token that the offer will buy - in the integer format "
    buy_amt: BigInt!
    " the amount of the pay token in human readable format "
    pay_amt_formatted: BigDecimal!
    " the amount of the buy token in human readable format "
    buy_amt_formatted: BigDecimal!
    " the USD value of the pay token at that block "
    pay_amt_usd: BigDecimal!
    " the USD value of the buy token at that block "
    buy_amt_usd: BigDecimal!
    " the price of the pay gem at the time of the take "
    pay_gem_price: BigDecimal!
    " the price of the buy gem at the time of the take "
    buy_gem_price: BigDecimal!
    " the offer entity that was taken "
    offer: Offer!
}

type Pool @entity {
    " the pool address "
    id: Bytes!
    " the pool asset, mapped to the token entity "
    asset: Token!
    " the underlying balance of the pool in the integer format "
    underlying: BigInt!
    " the underlying balance of the pool in human readable format "
    underlying_formatted: BigDecimal!
    " the amount of outstanding assets in the integer format "
    outstanding: BigInt!
    " the amount of outstanding assets in human readable format "
    outstanding_formatted: BigDecimal!
    " the amount of shares outstanding in the integer format "
    shares: BigInt!
    " the amount of shares outstanding in human readable format "
    shares_formatted: BigDecimal!
}

type Deposit @entity {
    " the transaction hash and log index of the deposit event "
    id: Bytes!
    " the transaction entity of the deposit "
    transaction: Transaction!
    " the depositing user entity "
    depositor: User!
    " the pool entity that the deposit was made to "
    pool: Pool!
    " the amount of the underlying asset that was deposited in the integer format "
    amount: BigInt!
    " the amount of the underlying asset that was deposited in human readable format "
    amount_formatted: BigDecimal!
    " the amount in USD of the underlying asset that was deposited at that block "
    amount_usd: BigDecimal!
    " the amount of share received at the time of the deposit in the integer format "
    shares: BigInt!
    " the amount of share received at the time of the deposit in human readable format "
    shares_formatted: BigDecimal!
    " the price of the bathtoken based upon the ratio of the deposit amount to shares received "
    price: BigDecimal!
}

type Withdraw @entity {
    " the transaction hash and log index of the withdraw event "
    id: Bytes!
    " the transaction entity of the withdraw "
    transaction: Transaction!
    " the withdrawing user entity "
    withdrawer: User!
    " the pool entity that the withdrawn was made to "
    pool: Pool!
    " the amount of the underlying asset that was withdrawn in the integer format "
    amount: BigInt!
    " the amount of the underlying asset that was withdrawn in human readable format "
    amount_formatted: BigDecimal!
    " the amount in USD of the underlying asset that was withdrawn at that block "
    amount_usd: BigDecimal!
    " the amount of share received at the time of the withdrawn in the integer format "
    shares: BigInt!
    " the amount of share received at the time of the withdrawn in human readable format "
    shares_formatted: BigDecimal!
    " the fee amount from the withdrawal event "
    fee: BigInt!
    " the fee amount from the withdrawal event in human readable format "
    fee_formatted: BigDecimal!
    " the fee amount in USD from the withdrawal event at that block "
    fee_usd: BigDecimal!
    " the price of the bathtoken based upon the ratio of the withdrawn amount to shares received "
    price: BigDecimal!
}

type MarketAid @entity { 
    " the market aid address "
    id: Bytes!
}





