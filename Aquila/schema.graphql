type UniswapFactory @entity {
  # factory address
  id: Bytes!

  # pair info
  pairCount: Int!

  # total volume
  totalVolumeUSD: BigDecimal!
  totalVolumeETH: BigDecimal!

  # # untracked values - less confident USD scores
  # untrackedVolumeUSD: BigDecimal!

  # total liquidity
  totalLiquidityUSD: BigDecimal!
  # totalLiquidityETH: BigDecimal!

  # transactions
  txCount: BigInt!
}


type ArenaToken @entity {
    " arena token address "
    id: Bytes!
    " ipfs hash of metadata "
    ipfsHash: String!
    " creation unix timestamp "
    createdAt: BigInt!
    " Last trade "
    lastTrade: Swap
    " related position "
    position: Pair!
    " user that created the token "
    user: User!
}

type Token @entity {
  # token address
  id: Bytes!

  # mirrored from the smart contract
  # symbol: String!
  # name: String!
  decimals: BigInt

  # used for other stats like marketcap
  # totalSupply: BigInt!

  # token specific volume
  tradeVolume: BigInt!
  tradeVolumeUSD: BigDecimal!
  # untrackedVolumeUSD: BigDecimal!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigInt!

  # # derived prices
  # derivedETH: BigDecimal!

  currentPrice: BigDecimal!

  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
  pairDayDataBase: [PairDayData!]! @derivedFrom(field: "token0")
  pairDayDataQuote: [PairDayData!]! @derivedFrom(field: "token1")
  pairBase: [Pair!]! @derivedFrom(field: "token0")
  pairQuote: [Pair!]! @derivedFrom(field: "token1")
}

type Pair @entity {
  # pair address
  id: Bytes!

  # flag to know if total liquidity is being tracked to keep tvl calculation corret
  tracked: Boolean!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: BigInt!
  reserve1: BigInt!
  totalSupply: BigDecimal!

  # derived liquidity
  # reserveETH: BigDecimal!
  reserve0USD: BigDecimal!
  reserve1USD: BigDecimal!

  # used for separating per pair reserves and global
  # trackedReserveETH: BigDecimal!

  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  # untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  pairHourData: [PairHourData!]! @derivedFrom(field: "pair")
  # mints: [Mint!]! @derivedFrom(field: "pair")
  # burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [Swap!]! @derivedFrom(field: "pair")
}

type User @entity {
  id: Bytes!
  usdSwapped: BigDecimal!
}

type Transaction @entity {
  id: Bytes! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  # This is not the reverse of Mint.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  # mints: [Mint!]!
  # burns: [Burn!]!
  swaps: [Swap!]!
}

type Mint @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: Bytes!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  to: Bytes!
  liquidity: BigDecimal!

  # populated from the Mint event
  sender: Bytes
  amount0: BigInt
  amount1: BigInt
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Burn @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: Bytes!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  liquidity: BigDecimal!

  # populated from the Burn event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # mark uncomplete in ETH case
  needsComplete: Boolean!

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: Bytes!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the Swap event
  sender: Bytes!
  from: Bytes! # the EOA that initiated the txn
  amount0In: BigInt!
  amount1In: BigInt!
  amount0Out: BigInt!
  amount1Out: BigInt!
  to: Bytes!
  logIndex: BigInt

  # derived info
  amountUSD: BigDecimal!
}

# Data accumulated and condensed into day stats for all of Uniswap
type UniswapDayData @entity {
  id: Bytes! # timestamp rounded to current day by dividing by 86400
  date: Int!

  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  # dailyVolumeUntracked: BigDecimal!

  totalVolumeETH: BigDecimal!
  # totalLiquidityETH: BigDecimal!
  totalVolumeUSD: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
  totalLiquidityUSD: BigDecimal!

  txCount: BigInt!
}

type PairHourData @entity {
  id: Bytes!
  hourStartUnix: Int! # unix timestamp for start of hour
  pair: Pair!

  # reserves
  reserve0: BigInt!
  reserve1: BigInt!

  # total supply for LP historical returns
  totalSupply: BigDecimal

  # derived liquidity
  reserve0USD: BigDecimal!
  reserve1USD: BigDecimal!

  # volume stats
  hourlyVolumeToken0: BigDecimal!
  hourlyVolumeToken1: BigDecimal!
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type PairDayData @entity {
  id: Bytes!
  date: Int!
  pairAddress: Bytes!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigInt!
  reserve1: BigInt!

  # total supply for LP historical returns
  totalSupply: BigDecimal

  # derived liquidity
  reserve0USD: BigDecimal!
  reserve1USD: BigDecimal!

  # volume stats
  dailyVolumeToken0: BigDecimal!
  dailyVolumeToken1: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!
}

type TokenDayData @entity {
  id: Bytes!
  date: Int!
  token: Token!

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  # liquidity stats
  totalLiquidityToken: BigInt!
  # totalLiquidityETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  # price stats
  # priceUSD: BigDecimal!
}

type CandleOneMinute @entity {
    " token0 + token1 + timestamp / 60 "
    id: Bytes!
    " token0 - determined by the alphabetical order of the token addresses "
    token0: Bytes!
    " token1 - determined by the alphabetical order of the token addresses "
    token1: Bytes!
    " opening timestamp of the candle "
    open_timestamp: BigInt!
    " closing timestamp of the candle "
    close_timestamp: BigInt!
    " opening trade of the candle "
    open: Swap!
    " closing trade of the candle "
    high: Swap!
    " smallest ratio of the trade amounts in the given order - token0_amount / token1_amount "
    low: Swap!
    " largest ratio of the trade amounts in the given order - token0_amount / token1_amount "
    close: Swap!
    " the ratio of token0 to token 1 at the high "
    high_ratio: BigDecimal!
    " the ratio of token0 to token 1 at the low "
    low_ratio: BigDecimal!
}

type CandleFiveMinute @entity {
    " token0 + token1 + timestamp / 300 "
    id: Bytes!
    " token0 - determined by the alphabetical order of the token addresses "
    token0: Bytes!
    " token1 - determined by the alphabetical order of the token addresses "
    token1: Bytes!
    " opening timestamp of the candle "
    open_timestamp: BigInt!
    " closing timestamp of the candle "
    close_timestamp: BigInt!
    " opening trade of the candle "
    open: Swap!
    " closing trade of the candle "
    high: Swap!
    " smallest ratio of the trade amounts in the given order - token0_amount / token1_amount "
    low: Swap!
    " largest ratio of the trade amounts in the given order - token0_amount / token1_amount "
    close: Swap!
    " the ratio of token0 to token 1 at the high "
    high_ratio: BigDecimal!
    " the ratio of token0 to token 1 at the low "
    low_ratio: BigDecimal!
}

type CandleFifteenMinute @entity {
    " token0 + token1 + timestamp / 900 "
    id: Bytes!
    " token0 - determined by the alphabetical order of the token addresses "
    token0: Bytes!
    " token1 - determined by the alphabetical order of the token addresses "
    token1: Bytes!
    " opening timestamp of the candle "
    open_timestamp: BigInt!
    " closing timestamp of the candle "
    close_timestamp: BigInt!
    " opening trade of the candle "
    open: Swap!
    " closing trade of the candle "
    high: Swap!
    " smallest ratio of the trade amounts in the given order - token0_amount / token1_amount "
    low: Swap!
    " largest ratio of the trade amounts in the given order - token0_amount / token1_amount "
    close: Swap!
    " the ratio of token0 to token 1 at the high "
    high_ratio: BigDecimal!
    " the ratio of token0 to token 1 at the low "
    low_ratio: BigDecimal!
}

type CandleOneHour @entity {
    " token0 + token1 + timestamp / 3600 "
    id: Bytes!
    " token0 - determined by the alphabetical order of the token addresses "
    token0: Bytes!
    " token1 - determined by the alphabetical order of the token addresses "
    token1: Bytes!
    " opening timestamp of the candle "
    open_timestamp: BigInt!
    " closing timestamp of the candle "
    close_timestamp: BigInt!
    " opening trade of the candle "
    open: Swap!
    " closing trade of the candle "
    high: Swap!
    " smallest ratio of the trade amounts in the given order - token0_amount / token1_amount "
    low: Swap!
    " largest ratio of the trade amounts in the given order - token0_amount / token1_amount "
    close: Swap!
    " the ratio of token0 to token 1 at the high "
    high_ratio: BigDecimal!
    " the ratio of token0 to token 1 at the low "
    low_ratio: BigDecimal!
}

type CandleOneDay @entity {
    " token0 + token1 + timestamp / 86400 "
    id: Bytes!
    " token0 - determined by the alphabetical order of the token addresses "
    token0: Bytes!
    " token1 - determined by the alphabetical order of the token addresses "
    token1: Bytes!
    " opening timestamp of the candle "
    open_timestamp: BigInt!
    " closing timestamp of the candle "
    close_timestamp: BigInt!
    " opening trade of the candle "
    open: Swap!
    " closing trade of the candle "
    high: Swap!
    " smallest ratio of the trade amounts in the given order - token0_amount / token1_amount "
    low: Swap!
    " largest ratio of the trade amounts in the given order - token0_amount / token1_amount "
    close: Swap!
    " the ratio of token0 to token 1 at the high "
    high_ratio: BigDecimal!
    " the ratio of token0 to token 1 at the low "
    low_ratio: BigDecimal!
}
