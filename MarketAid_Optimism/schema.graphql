type Aid @entity {
    " the address of the market aid contract "
    id: Bytes!
    " time of creation "
    created: BigInt!
    " map to the token balance entities "
    balances: [AidToken!]! @derivedFrom(field: "aid")
    " map to the offer entities "
    offers: [Offer!]! @derivedFrom(field: "maker")
    " map to the transaction entities "
    transactions: [Transaction!]! @derivedFrom(field: "aid")
}

type AidToken @entity {
    " the address of the market aid contract and the asset address "
    id: Bytes!
    " the market aid entity that this token balance belongs to "
    aid: Aid!
    " map to the token entity of the asset "
    token: Token!
    " the amount of the asset that the market aid contract holds "
    balance: BigInt!
    " the history of the token balance "
    history: [AidTokenHistory!]! @derivedFrom(field: "aid_token")
}

type AidTokenHistory @entity {
    " the address of the market aid contract, asset address, transaction hash, and log index "
    id: Bytes!
    " the timestamp of the event that resulted in this change in token balance "
    timestamp: BigInt!
    " the market aid entity that this token balance history belongs to "
    aid: Aid!
    " the market aid token entity that this token balance history belongs to "
    aid_token: AidToken!
    " the amount of the asset that the market aid contract holds, after the change "
    balance: BigInt!
    " the net change in the amount of the asset that the market aid contract has "
    balance_change: BigInt!
    " the event that resulted in this change in token balance, can be either fill, deposit, or withdraw "
    transaction: Transaction!
    " the log index of the event that resulted in this change in token balance "
    index: BigInt!
    " a boolean indicating if the event was a deposit / withdraw "
    book_update: Boolean!
}

type Transaction @entity {
    " the transaction hash "
    id: Bytes!
    " the block number "
    block: BigInt!
    " the index of the transaction in the block "
    index: BigInt!
    " transaction hash as a hex string "
    txn: String!
    " the timestamp of the transaction "
    timestamp: BigInt!
    " map to the transaction caller "
    from: Bytes!
    " if the transaction originated from a market aid contract, map to the market aid entity "
    aid: Aid
    " the price of eth at the time of the transaction :check:"
    eth_price: BigDecimal!
    " the source of the price data "
    price_source: String!
    " the l2 gas price in eth :check:"
    l2_gas_price: BigDecimal!
    " the amount of gas used by the l2 transaction :check:"
    l2_gas_used: BigInt!
    " the l2 executino fee in eth "
    l2_execution_fee: BigDecimal!
    " the l2 execution fee in USD "
    l2_execution_fee_usd: BigDecimal!
    " the l1 base fee in eth :check:"
    l1_base_fee: BigDecimal!
    " the l1_gas_used :underestimate:"
    l1_gas_used: BigDecimal!
    " overhead in the l1 transaction "
    l1_overhead: BigInt!
    " the l1 scalar "
    l1_scalar: BigDecimal!
    " the l1 decimal to make dynamic scalar value "
    l1_decimal: BigInt!
    " the l1 fee in eth "
    l1_fee: BigDecimal!
    " the l1 fee in usd "
    l1_fee_usd: BigDecimal!
    " the total gas fee in eth "
    total_gas_fee: BigDecimal!
    " the total gas fee in usd "
    total_gas_fee_usd: BigDecimal!   
    " map to the entities "
    offers: [Offer!]! @derivedFrom(field: "transaction")
    takes: [Take!]! @derivedFrom(field: "transaction")
    bookUpdates: [BookUpdate!]! @derivedFrom(field: "transaction")
}

type Offer @entity {
    " the id of the offer on the RubiconMarket contract "
    id: ID!
    " the transaction entity that this offer was created from "
    transaction: Transaction!
    " the market aid entity that created this offer "
    maker: Aid!
    " the token that the offer will pay with "
    pay_gem: Token!
    " the token that the maker offers to buy "
    buy_gem: Token!
    " the amount of the pay token that the offer will pay - in the integer format "
    pay_amt: BigInt!
    " the amount of the buy token that the offer will buy - in the integer format "
    buy_amt: BigInt!
    " the amount of the pay token that the offer has paid out - in the integer format "
    paid_amt: BigInt!
    " the amount of the buy token that the offer has bought - in the integer format "
    bought_amt: BigInt!
    " boolean indicating if the offer was filled or not "
    filled: Boolean!
    " boolean indicating if the offer was cancelled or not "
    cancelled: Boolean!
    " boolean indicating if the offer is live or not "
    live: Boolean!
    " the timestamp that offer was removed at"
    removed_timestamp: BigInt
    " the take events from this offer "
    takes: [Take!]! @derivedFrom(field: "offer")
}

type Take @entity {
    " the transaction hash and log index of the take event "
    id: Bytes!
    " the transaction entity that this offer was created from "
    transaction: Transaction!
    " the user entity that took the offer "
    taker: Bytes!
    " the token that the offer will pay with - what the taker receives "
    pay_gem: Token!
    " the token that the offer offer to buy - what the taker pays"
    buy_gem: Token!
    " the amount of the pay token that the offer will pay - in the integer format - the amount the taker receives "
    pay_amt: BigInt!
    " the amount of the buy token that the offer will buy - in the integer format - the amount the taker pays"
    buy_amt: BigInt!
    " the offer id that was taken "
    offer_id: String!
    " the offer entity that was taken, if it is a market aid offer "
    offer: Offer
}

type Arb @entity {
    " the transaction hash and log index of the arb event "
    id: Bytes!
    " the transaction entity that this offer was created from "
    transaction: Transaction!
    " the timestamp of the arb event "
    timestamp: BigInt!
    " the market aid instance that the function was called on " 
    aid: Aid!
    " the asset of the trade, this is the asset that profits are calculated in "
    asset: Token!
    " the other asset of the trade, this is the asset that is being traded against "
    quote: Token!
    " the amount of the asset that was traded "
    amount: BigInt!
    " the profit that was a result of the trade, denominated in the asset token "
    profit: BigInt! 
}

type BookUpdate @entity {
    " the market aid address, asset address, and transaction hash "
    id: Bytes!
    " the timestamp of the book update event "
    timestamp: BigInt!
    " the aid entity that this book update belongs to "
    aid: Aid!
    " the market aid token entity that is tracking this asset "
    aid_token: AidToken!
    " the transaction entity that this book was updated from "
    transaction: Transaction!
    " the index of the log that this book update was created from "
    index: BigInt!
    " the amount of the asset that was debited / credited "
    amount: BigInt!
    " the user that sent or received funds from the contract "
    user: Bytes
}

type ExternalSwap @entity {
    " the market aid address, venue address, transaction hash, and log index "
    id: Bytes!
    " the timestamp of the external swap event "
    timestamp: BigInt!
    " the aid entity that this external swap belongs to "
    aid: Aid!
    " the asset that is being sold "
    asset_sold: Token!
    " the asset that is received in exchange "
    asset_received: Token!
    " the amount of the asset that was sold "
    amount_sold: BigInt!
    " the amount of the asset that was received "
    amount_received: BigInt!
    " the transaction entity that this external swap was created from "
    transaction: Transaction!
    " the address of the venue that the swap was made on "
    venue: Bytes!
}

type FeeTakeEntity @entity {
    " the market aid address, asset address, transaction hash, and log index "
    id: Bytes!
    " the timestamp of the fee take event "
    timestamp: BigInt!
    " the aid entity that this fee take belongs to "
    aid: Aid!
    " the asset the fee was taken in "
    asset: Token!
    " the amount of the asset that was taken as a fee "
    amount: BigInt!
    " the transaction entity that this fee take was created from "
    transaction: Transaction!
}

type Token @entity {
    " address of the token "
    id: Bytes!
    " symbol of the token "
    symbol: String!
    " decimals of the token "
    decimals: BigInt!
}




